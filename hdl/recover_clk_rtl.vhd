-- VHDL Entity hdlc.recover_clk.symbol
--
-- Created:
--          by - harry.UNKNOWN (IBIZA)
--          at - 16:55:03 26/10/2025
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2021.4 Built on 12 Oct 2021 at 20:47:32
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.std_logic_arith.all;

ENTITY recover_clk IS
   PORT( 
      clk       : IN     std_logic;
      rst_n     : IN     std_logic;
      rx        : IN     std_logic;
      freq_tick : OUT    std_logic
   );

-- Declarations

END recover_clk ;

--
-- VHDL Architecture hdlc.recover_clk.rtl
--
-- Created:
--          by - harry.UNKNOWN (IBIZA)
--          at - 16:55:02 26/10/2025
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2021.4 Built on 12 Oct 2021 at 20:47:32
--
library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;


ARCHITECTURE rtl OF recover_clk IS

   -- Architecture declarations
   constant c_thr_min: integer := 240;
   constant c_thr_max: integer := 260;
   constant c_freq_default: integer := 250;
   constant c_cnt_max: integer := 255;

   -- Internal signal declarations
   SIGNAL freq         : integer RANGE 511 DOWNTO 0;
   SIGNAL rx_edge_fall : std_logic;
   SIGNAL rx_edge_rise : std_logic;
   SIGNAL valid        : std_logic;


   signal rx_d1: std_logic;
   signal rx_d2: std_logic;
   signal rx_d3: std_logic;

   signal cnt: integer range 255 downto 0;
   signal freq_cnt: integer range 255 downto 0;


BEGIN
   -- Architecture concurrent statements
   -- HDL Embedded Text Block 1 p_sync
   p_sync: process(clk, rst_n)
   begin
       if rst_n = '0' then
           rx_d1 <= '0';
           rx_d2 <= '0';
           rx_d3 <= '0';
   
       elsif rising_edge(clk) then
           rx_d1 <= rx;
           rx_d2 <= rx_d1;
           rx_d3 <= rx_d2;
       end if;
   end process p_sync;
   rx_edge_rise <= '1' when (rx_d2 = '1' and rx_d3 = '0') else '0';
   rx_edge_fall <= '1' when (rx_d2 = '0' and rx_d3 = '1') else '0';                           

   -- HDL Embedded Text Block 2 p_period
   p_period : process (clk, rst_n)
   begin
       if rst_n = '0' then
           cnt   <= 0;
           freq  <= c_freq_default;
           valid <= '0';
       elsif rising_edge(clk) then
           if (rx_edge_fall = '1') then
               cnt <= 0;
           elsif (rx_edge_rise = '1') then
               if (cnt > c_thr_min and cnt < c_thr_max) then
                   freq  <= cnt;
                   valid <= '1';
               end if;
           elsif (cnt < c_cnt_max) then
               cnt        <= cnt + 1;
               valid      <= '0';
           else 
               valid <= '0';
           end if;
       end if;
   end process p_period;

   -- HDL Embedded Text Block 3 p_freq
   p_freq: process(clk, rst_n)
   begin
       if rst_n = '0' then
           freq_cnt <= 0;
           freq_tick <= '0';
   
       elsif rising_edge(clk) then
           
           if (freq_cnt = 0 or rx_edge_fall = '1') then
               freq_cnt <= freq;
               freq_tick <= not(freq_tick);
           else
               freq_cnt <= freq_cnt - 1;
           end if;
   
       end if;
   end process p_freq;                               


   -- Instance port mappings.

END rtl;
